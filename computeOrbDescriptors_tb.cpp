#include<iostream>
#include<sstream>
#include<algorithm>
#include<iterator>
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "common/xf_structs.h"
#include "common/xf_params.h"
#include "C:\Users\zhaozhiyi\Desktop\orb\ORB.hpp"
#include "C:\labwork\xfopencv\include\common\xf_sw_utils.h"
//#include "C:\Users\zhaozhiyi\Desktop\orb\computerOrbDescriptors2.cpp"
#define IMAGEPYRAMID_HEIGHT 12155
#define IMAGEPYRAMID_WIDTH  3072

#define TYPE XF_8UC1
using namespace std;



int main(int argc,char **argv){

double keys_x[100] ={
		2796.000000,446.000000,2847.000000,446.000000,1299.000000,2757.000000,1511.000000,432.000000,621.000000,2326.000000,556.000000,1634.000000,141.000000,1131.000000,1305.000000,968.000000,520.000000,513.000000,725.000000,775.000000,566.000000,530.000000,411.600006,1906.800049,363.600006,1389.600098,445.200012,1384.800049,2704.800049,1574.400024,400.800018,728.400024,141.600006,454.800018,618.000000,446.400024,616.800049,439.200012,1536.000000,442.800018,411.840027,728.640015,616.320007,400.320007,807.840027,959.040039,2335.680176,1041.119995,141.120010,2704.320068,437.760010,1062.720093,156.960007,364.320007,737.280029,615.168030,729.216064,2529.792236,444.096039,1396.224121,2773.440186,806.976074,2365.632324,1062.720093,2232.576172,411.264038,155.520020,364.608032,404.352051,615.859314,1366.502563,2378.419434,443.750458,958.003357,2774.477295,727.833679,2233.267578,1397.606567,403.107941,617.103516,171.694122,808.704163,1072.466187,2774.477539,848.517334,2378.834473,442.921051,1143.632202,1364.595093,167.215149,170.201141,618.098877,809.201904,683.790527,268.738647,1143.035034,168.409546,171.992737,960.292725,809.799072
};
double keys_y[100] = {
		2459.000000,2218.000000,2192.000000,1313.000000,953.000000,2190.000000,1666.000000,1207.000000,241.000000,66.000000,68.000000,2059.000000,105.000000,2701.000000,306.000000,1546.000000,59.000000,57.000000,252.000000,951.000000,302.000000,61.000000,2493.600098,2360.400146,2257.200195,1182.000000,2478.000000,1281.600098,2086.800049,889.200012,436.800018,1038.000000,2074.800049,2516.400146,238.800003,2217.600098,932.400024,2220.000000,932.400024,2515.200195,2494.080078,1038.239990,933.120056,437.760010,920.160034,555.840027,63.360001,1324.800049,2073.600098,2086.560059,2481.120117,1825.920044,2059.200195,2256.479980,1049.760010,934.848083,1038.528076,1335.744141,2246.400146,1624.320190,2251.584229,921.024109,1534.464111,1826.496216,1287.360107,2493.504150,2059.776123,2256.768311,441.676849,935.193726,134.784012,2318.285156,2245.709229,553.651306,2251.929932,1038.873779,1287.705811,1623.629028,440.432739,935.608521,2299.208252,923.166931,2615.224854,2251.930176,335.923279,2319.114746,2246.953613,513.589355,134.369324,2290.250244,2299.208252,937.599243,922.669312,179.159088,2142.742676,512.395020,2289.653320,2296.819580,551.809998,924.460938
};

float keys_angle[100]={
	326.286,104.442,283.095,154.983,152.521,176.134,274.69,24.2132,100.084,289.595,111.092,323.1,116.489,322.118,122.269,347.704,101.057,89.3235,101.987,112.291,96.4695,103.711,43.4077,180.461,108.177,61.2136,103.299,36.3837,72.1754,15.7236,96.7277,354.132,230.772,97.0873,95.7954,114.108,64.9837,103.281,29.0624,92.7305,39.6003,311.154,62.4906,114.987,343.141,302.309,208.562,294.954,261.057,73.8826,88.653,347.296,172.429,117.129,213.993,59.5824,292.688,267.531,235.015,122.248,172.646,340.551,268.578,335.93,273.129,41.4918,147.961,119.224,116.572,66.2739,207.534,76.5825,230.855,301.106,173.999,1.03413,272.49,134.177,91.1001,75.653,337.168,318.652,91.3681,171.822,89.3187,73.2047,232.076,344.703,201.446,339.633,338.286,93.2483,310.522,97.9408,359.092,343.508,343.331,334.984,285.252,303.243
};
int keys_oct[100] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7
};

int patt_x[512] ={
	8,9,4,7,-11,-8,7,12,2,2,1,1,-2,-2,-13,-11,-13,-12,10,11,-13,-8,-11,-9,7,12,-4,-3,-13,-12,-9,-7,12,12,-3,-2,-6,-4,11,12,4,5,5,10,3,6,-8,-6,-2,-1,-13,-8,-7,-5,-4,-3,-10,-6,5,6,5,7,1,4,9,11,4,4,2,4,-4,-2,-8,-7,4,9,0,1,-13,-8,-3,-2,-6,-4,8,10,0,1,7,11,-13,-11,10,12,-6,-6,10,12,-13,-8,-13,-8,3,7,5,10,-1,1,3,5,2,3,-13,-13,-13,-12,-13,-11,-7,-4,6,12,-9,-7,-2,0,-12,-7,3,8,-7,-4,-3,-1,2,5,-11,-5,-1,0,5,5,-4,-4,-9,-9,-12,-8,10,12,7,12,-7,-6,-4,-3,7,12,-7,-5,-13,-12,-3,-2,7,12,-13,-11,1,12,2,3,-4,-2,-1,1,7,8,1,3,9,12,-1,-1,-13,-10,7,10,12,12,6,7,5,6,2,2,3,4,2,12,9,10,-8,-7,-11,-4,1,2,6,7,2,3,6,11,3,8,7,9,-11,-6,-10,-5,-5,-3,-10,-9,8,12,4,6,-10,-8,4,6,-2,-2,-5,-5,7,10,-9,-8,-5,-5,8,9,-9,-9,1,1,7,9,-2,-1,11,12,-12,-6,3,7,5,10,0,2,-9,-5,0,2,-1,1,5,7,3,6,-13,-8,-5,-3,-4,-3,6,8,-7,-6,-13,-5,1,3,4,8,-2,2,2,12,-2,0,4,9,-6,-3,-3,-1,7,12,4,5,-13,-9,7,8,7,7,-7,-7,-8,-7,-13,-12,2,3,10,12,-6,-6,8,9,2,2,-11,-10,-12,-7,-11,-10,5,11,-2,-1,-1,0,-13,-12,-10,-10,-3,-2,2,3,-9,-4,-4,-3,-4,-2,-6,-4,6,6,-13,-5,11,12,7,12,-1,0,-4,-3,-7,-6,-13,-8,-7,-6,-8,-6,-5,-4,-13,-8,1,5,1,10,9,10,5,10,-1,1,-9,-6,-1,1,-13,-8,8,10,2,3,7,12,-10,-5,-10,-8,4,8,3,8,-4,-3,5,10,4,5,-9,-4,0,3,-12,-6,3,4,-10,-10,8,12,-8,-6,2,3,10,11,6,8,-7,-6,-3,-3,-1,-1,-3,-3,-8,-8,4,12,2,3,6,11,3,7,11,12,-3,-3,4,4,2,2,-10,-8,-13,-11,-13,-11,6,11,0,1,-13,-9,-9,-6,-13,-8,5,8,2,3,-1,-1,9,11,11,12,3,3,-1,0,3,4,-13,-10,5,12,8,9,7,8,-10,-10,7,12,9,10,7,12,-1,0
};
int patt_y[512] = {
	-3,5,2,-12,9,2,-12,-13,-13,12,-7,6,-10,-4,-13,-8,-3,-9,4,9,-8,-9,7,12,7,6,-5,0,2,-3,0,5,-6,-1,6,12,-13,-8,-13,-8,7,1,-3,-3,-7,12,-7,-2,11,-10,12,10,3,-3,2,7,-12,11,-12,-7,-6,-1,0,-5,11,-13,7,12,-1,4,-12,7,-5,-10,11,12,-8,-13,-2,2,-2,3,9,-9,12,7,9,3,-5,-10,-6,0,7,1,-3,12,-9,-4,8,-12,0,-4,3,8,7,-7,7,-12,-10,6,-4,-10,0,5,-7,12,3,8,12,7,-10,8,-1,-6,-5,12,5,5,-10,-13,-7,5,-2,-7,9,-11,-13,-13,6,-1,-3,2,-13,12,-6,6,-10,-4,2,-3,12,12,-13,5,9,4,-1,2,6,1,11,5,7,-6,-8,-7,-7,-12,-3,12,-6,0,3,-13,-13,9,1,-6,-1,12,1,6,-9,3,-13,5,7,12,-5,9,3,11,-13,10,-12,3,8,-6,6,-13,-12,3,4,9,12,-6,12,-8,-9,-4,3,-2,3,0,-3,-8,8,3,-5,-4,11,10,-8,12,5,0,-1,-6,-6,-11,12,7,-2,7,0,12,-8,2,-6,12,-13,-8,-13,-2,-8,-13,-11,0,-8,-2,-4,1,1,-4,-6,-11,-9,4,7,12,5,8,-4,8,12,-13,7,12,2,7,11,-9,5,-8,-4,9,9,-3,-7,-12,5,0,6,12,6,-2,-10,10,1,-4,-2,-13,-12,12,-13,-6,1,3,-10,-5,-13,1,5,-11,-2,-7,9,-5,1,6,-8,6,-4,1,11,-8,6,-8,4,9,-5,3,-5,7,-3,-8,-12,8,-2,3,-13,-9,0,-5,-3,8,-13,12,-8,9,-11,-5,-2,11,9,-13,-3,2,-13,0,6,-10,12,-7,-11,9,-3,11,11,5,11,6,-5,-2,12,7,-8,-2,1,7,-12,-13,-2,-8,5,-9,-1,5,7,10,5,-13,0,-13,12,-1,-8,-9,11,-13,-3,2,-10,12,1,-10,-11,-6,-13,-6,-13,-9,-10,-7,-8,-13,-6,5,12,-13,2,-3,-13,-12,-13,-1,9,3,3,-9,1,1,2,-8,-10,9,-13,12,-12,-5,2,7,6,-8,8,-12,10,5,-9,9,-13,5,-7,4,-2,3,2,12,-5,11,-9,-13,-1,12,-1,4,0,6,-11,12,-4,1,-6,1,7,1,12,-13,0,-13,-1,4,3,-2,8,-3,-6,-2,-9,10,7,-9,-6,-1,5,-2,-3,-8,0,5,4,10,-6,5,0,5,8,11,9,-6,-4,-12,4,9,3,4,-7,-2,0,-2,-6,-11
};
	MyKeyPoint keypoints[100];

    for(int i = 0;i<100;i++){
		  keypoints[i].init();
          keypoints[i].x =(int)keys_x[i];
          keypoints[i].y =(int)keys_y[i];
          keypoints[i].octave =keys_oct[i];
          keypoints[i].angle =keys_angle[i];
	}
	

	xf::Point  patt[512];
	
	for(int i=0;i<512;i++){
		patt[i].x = patt_x[i];
		patt[i].y =patt_y[i];
	}
	 xf::Rect layer;
	 layer.x =32;
	 layer.y =32;
	 layer.height =3000;
	 layer.width =3000;
	 float layscal=1.0;
	

	cv::Mat img(100,32,CV_8U);
	cv::Mat img2 =cv::imread(argv[1],0);
	cv::Mat img1 =cv::imread(argv[2],0);
	xf::Mat<XF_8UC1,100,32,XF_NPPC1> descr(100,32);
	xf::Mat<TYPE,IMAGEPYRAMID_HEIGHT,IMAGEPYRAMID_WIDTH,XF_NPPC1> imp;
	std::cout<<"data type ::"<<sizeof(imp.data[1]);
	descr.copyTo(img1.data);
	imp.copyTo(img2.data);
	xf::imwrite("before.bmp", descr);
	int val;
	computeOrbDescriptors(imp,layer,layscal,keypoints,descr,patt, 32, 2,0,&val);

	std::cout<<val<<" "<<"successfully";
	//cv::Mat out(32,100);
	xf::imwrite("out.bmp",descr);
	return 0;

}

